basePath: /api/v1
definitions:
  models.Comment:
    properties:
      author:
        type: string
      comment_id:
        type: string
      content:
        type: string
      createdAt:
        type: string
      dislikes:
        type: integer
      likes:
        type: integer
      post_id:
        type: string
    type: object
  models.Member:
    properties:
      bio:
        type: string
      createdAt:
        type: string
      csrf_token:
        type: string
      disliked_posts:
        items:
          $ref: '#/definitions/models.Post'
        type: array
      email:
        type: string
      liked_posts:
        description: Relationships
        items:
          $ref: '#/definitions/models.Post'
        type: array
      password:
        type: string
      session_token:
        type: string
      updatedAt:
        type: string
      username:
        type: string
    type: object
  models.Post:
    properties:
      author:
        type: string
      comments:
        items:
          $ref: '#/definitions/models.Comment'
        type: array
      content:
        type: string
      createdAt:
        type: string
      disliked_by_members:
        items:
          $ref: '#/definitions/models.Member'
        type: array
      dislikes:
        type: integer
      images:
        items:
          type: string
        type: array
      liked_by_members:
        description: Relationships
        items:
          $ref: '#/definitions/models.Member'
        type: array
      likes:
        type: integer
      post_id:
        type: string
      title:
        type: string
      views:
        type: integer
    type: object
host: localhost:8080
info:
  contact: {}
  description: Backend APIs for the GatorShare app
  title: GatorShare API
  version: "1.0"
paths:
  /comment/{postId}:
    post:
      consumes:
      - application/json
      description: This API allows a logged-in user to add a new comment to a specific
        post.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: New comment data
        in: body
        name: comment
        required: true
        schema:
          $ref: '#/definitions/models.Comment'
      produces:
      - application/json
      responses:
        "200":
          description: Created comment details
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
      summary: Creates a new comment on a post
      tags:
      - comment
  /comment/{postId}/:
    get:
      consumes:
      - application/json
      description: This API fetches all comments associated with a specific post,
        ordered by creation date (latest first).
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: List of comments
          schema:
            items:
              $ref: '#/definitions/models.Comment'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
      summary: Retrieves all comments for a specific post
      tags:
      - comment
  /comment/{postId}/{commentId}:
    delete:
      consumes:
      - application/json
      description: This API allows the author of a comment to delete it from a specific
        post.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment deleted successfully
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Only the author can delete their own comments
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
      summary: Deletes an existing comment
      tags:
      - comment
    get:
      consumes:
      - application/json
      description: This API fetches a comment associated with a specific post by its
        unique comment ID.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Comment details
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
      summary: Retrieves a specific comment by its ID
      tags:
      - comment
    put:
      consumes:
      - application/json
      description: This API allows the author of a comment to update its content.
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Comment ID
        in: path
        name: commentId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Updated comment details
          schema:
            $ref: '#/definitions/models.Comment'
        "400":
          description: Bad Request or Empty Content
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden - Only the author can update their own comments
          schema:
            type: string
        "404":
          description: Comment not found
          schema:
            type: string
      summary: Updates an existing comment
      tags:
      - comment
  /current-user:
    get:
      consumes:
      - application/json
      description: This API returns the username of the currently logged-in Member
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Gets the current logged-in member
      tags:
      - member
  /login:
    post:
      consumes:
      - application/json
      description: This API is used to login a member by using the stored credentials
        in the database
      parameters:
      - description: Member username and password
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Logs in an existing member
      tags:
      - member
  /logout:
    post:
      consumes:
      - application/json
      description: This API clears the tokens in the cookies and database for the
        logged in Member
      parameters:
      - description: Member username
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Logs out a currently logged in member
      tags:
      - member
  /member:
    delete:
      consumes:
      - application/json
      description: This API removes the Member entity from the database for the logged-in
        Member
      parameters:
      - description: Member username
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Deletes a member from the system
      tags:
      - member
    get:
      consumes:
      - application/json
      description: Gets a slice of members using the limit and offset parameters,
        sorts based on the column and order (desc or asc) parameters, and filters
        based off the search_key parameter
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Gets a list of members
      tags:
      - member
    options:
      consumes:
      - application/json
      description: This API handles OPTIONS requests for CORS preflight
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
      summary: Handles OPTIONS requests
      tags:
      - member
    put:
      consumes:
      - application/json
      description: This API updates the field values for the logged-in Member
      parameters:
      - description: Updated member info
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Not Found
          schema:
            type: string
      summary: Updates a members information
      tags:
      - member
  /member/{username}:
    get:
      consumes:
      - application/json
      description: This API fetches a Member entity by their unique username
      parameters:
      - description: Username
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Success
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Gets a member's info by their username
      tags:
      - member
  /member/{username}/disliked-posts:
    get:
      consumes:
      - application/json
      description: This API fetches all posts that have been disliked by a specific
        user, identified by their username.
      parameters:
      - description: Username of the member
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Retrieves posts disliked by a specific user
      tags:
      - member
  /member/{username}/liked-posts:
    get:
      consumes:
      - application/json
      description: This API fetches all posts that have been liked by a specific user,
        identified by their username.
      parameters:
      - description: Username of the member
        in: path
        name: username
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
        "404":
          description: User not found
          schema:
            type: string
      summary: Retrieves posts liked by a specific user
      tags:
      - member
  /member/{username}/posts:
    get:
      consumes:
      - application/json
      description: This API fetches all posts created by a specific member
      parameters:
      - description: Member username
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "500":
          description: Internal Server Error
          schema:
            type: string
      summary: Retrieves posts by a specific user
      tags:
      - post
  /post:
    get:
      consumes:
      - application/json
      description: Gets a slice of posts using the limit and offset parameters, sorts
        based on the column and order (desc or asc) parameters, and filters based
        off the search_key parameter
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/models.Post'
            type: array
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Retrieves posts
      tags:
      - post
    post:
      consumes:
      - application/json
      description: This API creates a new post for the logged-in member
      parameters:
      - description: New post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
      summary: Creates a new post
      tags:
      - post
  /post/{postId}:
    delete:
      consumes:
      - application/json
      description: This API deletes a post by its ID if the logged-in member is the
        author
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Deletes a post
      tags:
      - post
    get:
      consumes:
      - application/json
      description: This API fetches a post and its comments by the post ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Retrieves a specific post by ID
      tags:
      - post
    put:
      consumes:
      - application/json
      description: This API updates a post's content if the logged-in member is the
        author
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      - description: Updated post
        in: body
        name: post
        required: true
        schema:
          $ref: '#/definitions/models.Post'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Post'
        "400":
          description: Bad Request
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "403":
          description: Forbidden
          schema:
            type: string
      summary: Updates a post
      tags:
      - post
  /post/{postId}/increment-views:
    put:
      consumes:
      - application/json
      description: This API increments the view count of a specific post by its ID
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Increments the view count of a post
      tags:
      - post
  /post/{postId}/like-dislike:
    put:
      consumes:
      - application/json
      description: This API allows a logged-in user to like or dislike a specific
        post. The action is specified in the request body as either "like" or "dislike".
      parameters:
      - description: Post ID
        in: path
        name: postId
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: Action applied successfully with updated like/dislike counts
          schema:
            additionalProperties: true
            type: object
        "400":
          description: Bad Request or Invalid Action
          schema:
            type: string
        "401":
          description: Unauthorized
          schema:
            type: string
        "404":
          description: Post not found
          schema:
            type: string
      summary: Likes or dislikes a post
      tags:
      - post
  /register:
    post:
      consumes:
      - application/json
      description: This API is used to add a Member entity to the database
      parameters:
      - description: New member
        in: body
        name: member
        required: true
        schema:
          $ref: '#/definitions/models.Member'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            type: string
        "400":
          description: Bad Request
          schema:
            type: string
      summary: Registers a new member
      tags:
      - member
swagger: "2.0"
